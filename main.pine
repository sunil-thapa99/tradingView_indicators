// Â© sunilth
//@version=6
indicator(title="Custom Indicator", shorttitle="Custom", overlay=true, timeframe="", timeframe_gaps=true)
//============== INPUTS ==============//
//-- VWAP Configuration --//
hideonDWM = input(false, title="Hide VWAP on 1D or Above", group="VWAP Settings", display = display.data_window)
anchor = input.string(defval = "Session", title="Anchor Period",
 options=["Session", "Week", "Month"], group="VWAP Settings")
src = input(title = "Source", defval = hlc3, group="VWAP Settings", display = display.data_window)
offset = input.int(0, title="Offset", group="VWAP Settings", minval=0, display = display.data_window)

//-- VWAP Band Configuration --//
BANDS_GROUP = "Bands Settings"
showBand_1 = input(false, title = "", group = BANDS_GROUP, inline = "band_1", 
  tooltip="Toggle First Deviation Band", display = display.data_window)
bandMult_1 = input.float(1.28, title = "Bands Multiplier #1", group = BANDS_GROUP, 
  inline = "band_1", step = 0.5, minval=0, tooltip="Standard Deviation Multiplier for Primary Band", display = display.data_window)
showBand_2 = input(false, title = "", group = BANDS_GROUP, inline = "band_2",
  tooltip="Toggle Second Deviation Band", display = display.data_window)
bandMult_2 = input.float(2.01, title = "Bands Multiplier #2", group = BANDS_GROUP, 
  inline = "band_2", step = 0.5, minval=0, tooltip="Standard Deviation Multiplier for Secondary Band", display = display.data_window)

//-- EMA Configuration --//
EMA_GROUP = "EMA Settings"
len_20 = 20
len_200 = 200

ema_src = input(close, title="Source")
ema_offset = 0
out_20 = ta.ema(ema_src, len_20)
out_200 = ta.ema(ema_src, len_200)

//============== CORE CALCULATIONS ==============//
// -- VWAP -- //
// Validate volume data presence
cumVolume = ta.cum(volume)
if barstate.islast and cumVolume == 0
    runtime.error("No volume data available - check data source.")

// Determine new anchor period
isNewPeriod = switch anchor
    "Session"   => timeframe.change("D")
    "Week"      => timeframe.change("W")
    "Month"     => timeframe.change("M")
    => false

// Reset at first historical bar
if na(src[1])
    isNewPeriod := true

// Initialize variables
float vwapValue = na
float upperBandValue1 = na
float lowerBandValue1 = na
float upperBandValue2 = na
float lowerBandValue2 = na

// Calculate VWAP and bands when enabled
if not (hideonDWM and timeframe.isdwm)
    [_vwap, _stdevUpper, _] = ta.vwap(src, isNewPeriod, 1)
    vwapValue := _vwap
    stdevAbs = _stdevUpper - _vwap  // Get absolute deviation value
    
    // Calculate band levels
    upperBandValue1 := _vwap + stdevAbs * bandMult_1
    lowerBandValue1 := _vwap - stdevAbs * bandMult_1
    upperBandValue2 := _vwap + stdevAbs * bandMult_2
    lowerBandValue2 := _vwap - stdevAbs * bandMult_2


//============== VISUALIZATION ==============//
// -- VWAP -- //
// Plot main VWAP line
plot(vwapValue, title = "VWAP", color =#29eaff, offset = offset)

// First Deviation Band
upperBand_1 = plot(upperBandValue1, title="Upper Band #1", color = color.green, 
  offset = offset, display = showBand_1 ? display.all : display.none)
lowerBand_1 = plot(lowerBandValue1, title="Lower Band #1", color = color.green, 
  offset = offset, display = showBand_1 ? display.all : display.none)
fill(upperBand_1, lowerBand_1, title="Bands Fill #1", 
  color = color.new(color.green, 95), display = showBand_1 ? display.all : display.none)

// Second Deviation Band
upperBand_2 = plot(upperBandValue2, title="Upper Band #2", color = color.olive, 
  offset = offset, display = showBand_2 ? display.all : display.none)
lowerBand_2 = plot(lowerBandValue2, title="Lower Band #2", color = color.olive, 
  offset = offset, display = showBand_2 ? display.all : display.none)
fill(upperBand_2, lowerBand_2, title="Bands Fill #2", 
  color = color.new(color.olive, 95), display = showBand_2 ? display.all : display.none)


// -- EMA -- //
plot(out_20, title="EMA 20", color=#E9E9E9, offset=ema_offset)
plot(out_200, title="EMA 200", color=#fc0000, offset=ema_offset)